<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DapperDal</name>
    </assembly>
    <members>
        <member name="T:DapperDal.DalBase`2">
            <summary>
            实体数据访问层基类
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPrimaryKey">实体ID（主键）类型</typeparam>
        </member>
        <member name="M:DapperDal.DalBase`2.Execute(System.String,System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Execute(System.String,System.String,System.Object)">
            <summary>
            执行参数化SQL语句
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Execute(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行参数化SQL语句
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.ExecuteScalar``1(System.String,System.String)">
            <summary>
            执行SQL语句，返回第一行第一列数据
            </summary>
            <typeparam name="TAny">返回数据类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>第一行第一列数据</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.ExecuteScalar``1(System.String,System.String,System.Object)">
            <summary>
            执行参数化SQL语句，返回第一行第一列数据
            </summary>
            <typeparam name="TAny">返回数据类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>第一行第一列数据</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.ExecuteScalar``1(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行参数化SQL语句，返回第一行第一列数据
            </summary>
            <typeparam name="TAny">返回数据类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>第一行第一列数据</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryDataSet(System.String,System.String)">
            <summary>
            执行 SQL 语句返回 DataSet
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryDataSet(System.String,System.String,System.Object)">
            <summary>
            执行 SQL 语句返回 DataSet
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryDataSet(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 SQL 语句返回 DataSet
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryDataSet(System.String)">
            <summary>
            执行 SQL 语句返回 DataSet
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryDataSet(System.String,System.Object)">
            <summary>
            执行 SQL 语句返回 DataSet
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryDataSet(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行 SQL 语句返回 DataSet
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Exsit">
            <summary>
            判断实体是否存在
            </summary>
            <returns>是否存在</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Exsit(`1)">
            <summary>
            判断指定主键ID的实体是否存在
            </summary>
            <param name="id">实体主键ID</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Exsit(System.Object)">
            <summary>
            判断指定条件的实体是否存在
            （条件使用谓词或匿名对象）
            </summary>
            <param name="predicate">条件，使用谓词或匿名对象</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Exsit(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断指定条件的实体是否存在
            （条件使用表达式）
            </summary>
            <param name="predicate">条件，使用表达式</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.ExecuteScalar``1(System.String)">
            <summary>
            执行SQL语句，返回第一行第一列数据
            </summary>
            <typeparam name="TAny">返回数据类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>第一行第一列数据</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.ExecuteScalar``1(System.String,System.Object)">
            <summary>
            执行参数化SQL语句，返回第一行第一列数据
            </summary>
            <typeparam name="TAny">返回数据类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>第一行第一列数据</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.ExecuteScalar``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行参数化SQL语句，返回第一行第一列数据
            </summary>
            <typeparam name="TAny">返回数据类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>第一行第一列数据</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst">
            <summary>
            获取所有实体列表的第一条
            </summary>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(System.Object)">
            <summary>
            根据查询条件获取实体列表的第一条
            （查询使用谓词或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据排序条件获取所有实体列表的第一条
            （排序使用表达式）
            </summary>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(System.Object,System.Object)">
            <summary>
            根据查询条件和排序条件获取实体列表的第一条
            （查询使用谓词或匿名对象，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(System.Object,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体列表的第一条
            （查询使用谓词或匿名对象，排序使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件获取实体列表的第一条
            （查询使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            根据查询条件和排序条件获取实体列表的第一条
            （查询使用表达式，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体列表的第一条
            （查询使用表达式，排序使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32)">
            <summary>
            获取所有实体列表的前N条
            </summary>
            <param name="limit">前几条</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,System.Object)">
            <summary>
            根据查询条件获取实体列表的前N条
            （查询使用谓词或匿名对象）
            </summary>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据排序条件获取所有实体列表的前N条
            （排序使用表达式）
            </summary>
            <param name="limit">前几条</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,System.Object,System.Object)">
            <summary>
            根据查询条件和排序条件获取实体列表的前N条
            （查询使用谓词或匿名对象，排序使用Sort或匿名对象）
            </summary>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,System.Object,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体列表的前N条
            （查询使用谓词或匿名对象，排序使用表达式）
            </summary>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件获取实体列表的前N条
            （查询使用表达式）
            </summary>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            根据查询条件和排序条件获取实体列表的前N条
            （查询使用表达式，排序使用Sort或匿名对象）
            </summary>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetTop(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体列表的前N条
            （查询使用表达式，排序使用表达式）
            </summary>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Execute(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Execute(System.String,System.Object)">
            <summary>
            执行参数化SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Execute(System.String,System.Object,System.Data.CommandType)">
            <summary>
            执行参数化SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query(System.String,System.String)">
            <summary>
            使用SQL语句获取实体集合
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取实体集合
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取实体集合
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query``1(System.String,System.String)">
            <summary>
            使用SQL语句获取指定实体集合
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query``1(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取指定实体集合
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query``1(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取指定实体集合
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst(System.String,System.String)">
            <summary>
            使用SQL语句获取实体
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取实体
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取实体
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst``1(System.String,System.String)">
            <summary>
            使用SQL语句获取指定实体
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst``1(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取指定实体
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst``1(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取指定实体
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst(System.String)">
            <summary>
            使用SQL语句获取实体
            </summary>
            <param name="sql">SQL语句</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst(System.String,System.Object)">
            <summary>
            使用SQL语句获取实体
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取实体
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst``1(System.String)">
            <summary>
            使用SQL语句获取指定实体
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst``1(System.String,System.Object)">
            <summary>
            使用SQL语句获取指定实体
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryFirst``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取指定实体
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``2(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``2(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``2(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``3(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``3(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``3(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``4(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``4(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``4(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``5(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``5(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``5(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``6(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``6(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``6(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``7(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``7(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``7(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``8(System.String,System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <typeparam name="TEighth">第八个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``8(System.String,System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <typeparam name="TEighth">第八个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``8(System.String,System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <typeparam name="TEighth">第八个实体类型</typeparam>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SwitchActive(`0,System.Boolean,System.Object,System.Object)">
            <summary>
            逻辑删除或激活指定实体
            </summary>
            <param name="entity">实体</param>
            <param name="isActive">是否激活，true:激活，false:逻辑删除</param>
            <param name="softDeleteProps">逻辑删除属性名及更新值，默认:IsActive=0</param>
            <param name="softActiveProps">激活属性名及更新值，默认:IsActive=1</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SwitchActive(`1,System.Boolean,System.Object,System.Object)">
            <summary>
            根据实体主键ID逻辑删除或激活指定实体
            </summary>
            <param name="id">实体主键ID</param>
            <param name="isActive">是否激活，true:激活，false:逻辑删除</param>
            <param name="softDeleteProps">逻辑删除属性名及更新值，默认:IsActive=0</param>
            <param name="softActiveProps">激活属性名及更新值，默认:IsActive=1</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SwitchActive(System.Object,System.Boolean,System.Object,System.Object)">
            <summary>
            根据条件逻辑删除或激活实体
            </summary>
            <param name="predicate">删除条件</param>
            <param name="isActive">是否激活，true:激活，false:逻辑删除</param>
            <param name="softDeleteProps">逻辑删除属性名及更新值，默认:IsActive=0</param>
            <param name="softActiveProps">激活属性名及更新值，默认:IsActive=1</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SwitchActive(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Object,System.Object)">
            <summary>
            根据条件逻辑删除或激活实体
            </summary>
            <param name="predicate">删除条件</param>
            <param name="isActive">是否激活，true:激活，false:逻辑删除</param>
            <param name="softDeleteProps">逻辑删除属性名及更新值，默认:IsActive=0</param>
            <param name="softActiveProps">激活属性名及更新值，默认:IsActive=1</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SoftDelete(`0,System.Object)">
            <summary>
            逻辑删除指定实体
            </summary>
            <param name="entity">实体</param>
            <param name="props">逻辑删除属性名及更新值，默认 IsActive=0</param>
            <returns>逻辑删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SoftDelete(`1,System.Object)">
            <summary>
            根据实体主键ID逻辑删除指定实体
            </summary>
            <param name="id">实体主键ID</param>
            <param name="props">逻辑删除属性名及更新值，默认 IsActive=0</param>
            <returns>逻辑删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SoftDelete(System.Object,System.Object)">
            <summary>
            根据条件逻辑删除实体
            </summary>
            <param name="predicate">删除条件</param>
            <param name="props">逻辑删除属性名及更新值，默认 IsActive=0</param>
            <returns>逻辑删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SoftDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            根据条件逻辑删除实体
            </summary>
            <param name="predicate">删除条件</param>
            <param name="props">逻辑删除属性名及更新值，默认 IsActive=0 }</param>
            <returns>逻辑删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Get(`1)">
            <summary>
            根据实体ID（主键）获取实体
            </summary>
            <param name="id">实体ID</param>
            <returns>实体</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.#ctor">
            <summary>
            默认初始化 DAL 新实例
            </summary>
        </member>
        <member name="M:DapperDal.DalBase`2.#ctor(System.String)">
            <summary>
            用配置节点名初始化 DAL 新实例
            </summary>
            <param name="connNameOrConnStr">DB连接字符串配置节点名</param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到配置节点</exception>
        </member>
        <member name="P:DapperDal.DalBase`2.Configuration">
            <summary>
            配置项
            </summary>
        </member>
        <member name="P:DapperDal.DalBase`2.Options">
            <summary>
            配置项
            </summary>
        </member>
        <member name="P:DapperDal.DalBase`2.ConnectionString">
            <summary>
            DB连接字符串
            </summary>
        </member>
        <member name="M:DapperDal.DalBase`2.OpenConnection">
            <summary>
            打开DB连接
            </summary>
            <returns>DB连接</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.OpenConnection(System.String)">
            <summary>
            打开DB连接
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <returns>DB连接</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.SetDefaultConfiguration">
            <summary>
            初始化配置项
            </summary>
        </member>
        <member name="M:DapperDal.DalBase`2.SetDefaultOptions">
            <summary>
            初始化配置项
            </summary>
        </member>
        <member name="M:DapperDal.DalBase`2.ResolveConnectionString(System.String)">
            <summary>
            获取 DB 连接串
            </summary>
            <param name="connNameOrConnStr">DB 连接字符串配置节点名</param>
            <returns>DB 连接串</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Count">
            <summary>
            获取实体条数
            </summary>
            <returns>实体条数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Count(System.Object)">
            <summary>
            根据条件获取实体条数
            （条件使用谓词或匿名对象）
            </summary>
            <param name="predicate">条件，使用谓词或匿名对象</param>
            <returns>实体条数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取实体条数
            （条件使用表达式）
            </summary>
            <param name="predicate">条件，使用表达式</param>
            <returns>实体条数</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Delete(`0)">
            <summary>
            删除指定实体
            </summary>
            <param name="entity">实体</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Delete(`1)">
            <summary>
            根据实体主键ID删除指定实体
            </summary>
            <param name="id">实体主键ID</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Delete(System.Object)">
            <summary>
            根据条件删除实体
            </summary>
            <param name="predicate">删除条件</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件删除实体
            </summary>
            <param name="predicate">删除条件</param>
            <returns>删除结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Insert(`0)">
            <summary>
            插入指定实体
            </summary>
            <param name="entity">实体</param>
            <returns>实体主键</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入指定实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(`0)">
            <summary>
            更新指定实体
            </summary>
            <param name="entity">实体</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            更新指定实体指定属性
            </summary>
            <param name="entity">实体</param>
            <param name="props">要更新的属性名列表</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(`0,System.Object)">
            <summary>
            更新指定实体指定属性
            </summary>
            <param name="entity">实体</param>
            <param name="props">要更新的属性名列表，以匿名对象提供</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(`1,System.Object)">
            <summary>
            更新指定实体指定属性
            </summary>
            <param name="id">实体主键ID</param>
            <param name="props">更新属性名</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(System.Object)">
            <summary>
            根据指定指定主键ID更新实体指定属性
            （条件使用实体主键ID）
            </summary>
            <param name="keyAndProps">更新实体，包含主键ID、更新属性及值</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(System.Object,System.Object)">
            <summary>
            根据指定更新条件更新实体指定属性
            （条件使用谓词或匿名对象）
            </summary>
            <param name="props">更新属性及值</param>
            <param name="predicate">更新条件，使用谓词或匿名对象</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Update(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定更新条件更新实体指定属性
            （条件使用表达式）
            </summary>
            <param name="props">更新属性及值</param>
            <param name="predicate">更新条件，使用表达式</param>
            <returns>更新结果</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetSet(System.Object,System.Object,System.Int32,System.Int32)">
            <summary>
            根据查询条件和排序条件获取实体区间列表
            （查询使用谓词或匿名对象，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <returns>实体区间列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetSet(System.Object,System.Int32,System.Int32,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体区间列表
            （查询使用谓词或匿名对象，排序表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体区间列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetSet(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Int32,System.Int32)">
            <summary>
            根据查询条件和排序条件获取实体区间列表
            （查询使用表达式，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <returns>实体区间列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetSet(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体区间列表
            （查询使用表达式，排序使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体区间列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetListPaged(System.Object,System.Object,System.Int32,System.Int32)">
            <summary>
            根据查询条件和排序条件获取实体分页列表
            （查询使用谓词或匿名对象，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="pageNumber">页号，从1起始</param>
            <param name="itemsPerPage">每页条数</param>
            <returns>实体分页列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetListPaged(System.Object,System.Int32,System.Int32,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体分页列表
            （查询使用谓词或匿名对象，排序表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pageNumber">页号，从1起始</param>
            <param name="itemsPerPage">每页条数</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体分页列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetListPaged(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Int32,System.Int32)">
            <summary>
            根据查询条件和排序条件获取实体分页列表
            （查询使用表达式，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="pageNumber">页号，从1起始</param>
            <param name="itemsPerPage">每页条数</param>
            <returns>实体分页列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetListPaged(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体分页列表
            （查询使用表达式，排序使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="pageNumber">页号，从1起始</param>
            <param name="itemsPerPage">每页条数</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体分页列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList">
            <summary>
            获取所有实体列表
            </summary>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(System.Object)">
            <summary>
            根据查询条件获取实体列表
            （查询使用谓词或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据排序条件获取所有实体列表
            （排序使用表达式）
            </summary>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(System.Object,System.Object)">
            <summary>
            根据查询条件和排序条件获取实体列表
            （查询使用谓词或匿名对象，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(System.Object,DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体列表
            （查询使用谓词或匿名对象，排序使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件获取实体列表
            （查询使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)">
            <summary>
            根据查询条件和排序条件获取实体列表
            （查询使用表达式，排序使用Sort或匿名对象）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},DapperDal.Expressions.SortDirection,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            根据查询条件和排序条件获取实体列表
            （查询使用表达式，排序使用表达式）
            </summary>
            <param name="predicate">查询条件</param>
            <param name="ascending">排序方向</param>
            <param name="sortingExpression">排序字段</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query(System.String)">
            <summary>
            使用SQL语句获取实体集合
            </summary>
            <param name="sql">SQL语句</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query(System.String,System.Object)">
            <summary>
            使用SQL语句获取实体集合
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取实体集合
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query``1(System.String)">
            <summary>
            使用SQL语句获取指定实体集合
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query``1(System.String,System.Object)">
            <summary>
            使用SQL语句获取指定实体集合
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.Query``1(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取指定实体集合
            </summary>
            <typeparam name="TAny">返回实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``2(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``2(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``2(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``3(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``3(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``3(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``4(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``4(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``4(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``5(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``5(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``5(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``6(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``6(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``6(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``7(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``7(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``7(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``8(System.String)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <typeparam name="TEighth">第八个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``8(System.String,System.Object)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <typeparam name="TEighth">第八个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="M:DapperDal.DalBase`2.QueryMultiple``8(System.String,System.Object,System.Data.CommandType)">
            <summary>
            使用SQL语句获取多个指定实体集合
            </summary>
            <typeparam name="TFirst">第一个实体类型</typeparam>
            <typeparam name="TSecond">第二个实体类型</typeparam>
            <typeparam name="TThird">第三个实体类型</typeparam>
            <typeparam name="TFourth">第四个实体类型</typeparam>
            <typeparam name="TFifth">第五个实体类型</typeparam>
            <typeparam name="TSixth">第六个实体类型</typeparam>
            <typeparam name="TSeventh">第七个实体类型</typeparam>
            <typeparam name="TEighth">第八个实体类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <param name="commandType">SQL语句命令类型</param>
            <returns>多个实体集合</returns>
        </member>
        <member name="T:DapperDal.DalBase`1">
            <summary>
            实体数据访问层基类
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:DapperDal.DalBase`1.#ctor">
            <summary>
            默认初始化 DAL 新实例
            </summary>
        </member>
        <member name="M:DapperDal.DalBase`1.#ctor(System.String)">
            <summary>
            用配置节点名初始化 DAL 新实例
            </summary>
            <param name="connectionName">DB连接字符串配置节点名</param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到配置节点</exception>
        </member>
        <member name="T:DapperDal.DalOptions">
            <summary>
            数据访问设置项
            </summary>
        </member>
        <member name="P:DapperDal.DalOptions.SoftDeletePropsFactory">
            <summary>
            逻辑删除时更新属性和值的构造器
            </summary>
        </member>
        <member name="P:DapperDal.DalOptions.SoftActivePropsFactory">
            <summary>
            逻辑激活时更新属性和值的构造器
            </summary>
        </member>
        <member name="T:DapperDal.IDalConfiguration">
            <summary>
            数据访问配置接口
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.DefaultMapper">
            <summary>
            默认实体映射类型
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.MappingAssemblies">
            <summary>
            实体映射类型检索程序集
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.Dialect">
            <summary>
            SQL方言实例
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.DalImplementor">
            <summary>
            数据访问实现实例
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.Nolock">
            <summary>
            生成SQL时，是否添加 WITH (NOLOCK)
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.OutputSql">
            <summary>
            SQL输出方法
            </summary>
        </member>
        <member name="P:DapperDal.IDalConfiguration.Buffered">
            <summary>
            实体集合返回前是否要缓冲（ToList）
            </summary>
        </member>
        <member name="M:DapperDal.IDalConfiguration.SetMappingAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <summary>
            设置实体映射类型检索程序集
            </summary>
            <param name="assemblies">实体映射类型检索程序集</param>
        </member>
        <member name="M:DapperDal.IDalConfiguration.GetMap(System.Type)">
            <summary>
            获取实体映射类型
            </summary>
            <param name="entityType">实体类型</param>
            <returns>实体映射类型</returns>
        </member>
        <member name="M:DapperDal.IDalConfiguration.GetMap``1">
            <summary>
            获取实体映射类型
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体映射类型</returns>
        </member>
        <member name="M:DapperDal.IDalConfiguration.ClearCache">
            <summary>
            清空实体映射类型缓存
            </summary>
        </member>
        <member name="M:DapperDal.IDalConfiguration.GetNextGuid">
            <summary>
            获取新的GUID
            </summary>
            <returns>新的GUID</returns>
        </member>
        <member name="T:DapperDal.DalConfiguration">
            <summary>
            数据访问配置类
            </summary>
        </member>
        <member name="M:DapperDal.DalConfiguration.#ctor">
            <summary>
            初始化数据访问配置
            </summary>
        </member>
        <member name="M:DapperDal.DalConfiguration.#ctor(System.Type,System.Collections.Generic.IList{System.Reflection.Assembly},DapperDal.Sql.ISqlDialect)">
            <summary>
            初始化数据访问配置
            </summary>
            <param name="defaultMapper">默认实体映射类型</param>
            <param name="mappingAssemblies">实体映射类型检索程序集</param>
            <param name="sqlDialect">SQL方言实例</param>
        </member>
        <member name="P:DapperDal.DalConfiguration.Default">
            <summary>
            全局默认配置
            </summary>
        </member>
        <member name="P:DapperDal.DalConfiguration.DefaultMapper">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.DalConfiguration.MappingAssemblies">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.DalConfiguration.Dialect">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.DalConfiguration.DalImplementor">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.DalConfiguration.Nolock">
            <summary>
            生成SQL时，是否添加 WITH (NOLOCK)
            </summary>
        </member>
        <member name="P:DapperDal.DalConfiguration.OutputSql">
            <summary>
            SQL输出方法
            </summary>
        </member>
        <member name="P:DapperDal.DalConfiguration.Buffered">
            <summary>
            实体集合返回前是否要缓冲（ToList）
            </summary>
        </member>
        <member name="M:DapperDal.DalConfiguration.SetMappingAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.DalConfiguration.GetMap(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.DalConfiguration.GetMap``1">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.DalConfiguration.ClearCache">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.DalConfiguration.GetNextGuid">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Expressions.PredicateExtensions">
            <summary>
            查询条件表达式转换扩展
            </summary>
        </member>
        <member name="M:DapperDal.Expressions.PredicateExtensions.ToPredicateGroup``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询条件表达式转换为谓词组的扩展方法
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPrimaryKey">实体主键类型</typeparam>
            <param name="expression">查询条件表达式</param>
            <returns>查询条件谓词组</returns>
        </member>
        <member name="T:DapperDal.Expressions.ExpressionUtility">
            <summary>
            表达式工具方法
            </summary>
        </member>
        <member name="M:DapperDal.Expressions.ExpressionUtility.IsConstant``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            判断表达式是否是常量表达式
            </summary>
            <typeparam name="T">表达式参数类型</typeparam>
            <typeparam name="TResult">表达式返回类型</typeparam>
            <param name="expr">要判断的表达式</param>
            <param name="value">常量</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:DapperDal.Expressions.ExpressionUtility.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            从属性表达式获取属性元数据访问实例
            </summary>
            <typeparam name="T1">属性表达式参数类型</typeparam>
            <typeparam name="T2">属性表达式返回类型</typeparam>
            <param name="propertyGetter">属性表达式</param>
            <returns>属性元数据访问实例</returns>
        </member>
        <member name="M:DapperDal.Expressions.ExpressionUtility.AddBinding(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberBinding)">
            <summary>
            
            </summary>
            <param name="memberInit"></param>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:DapperDal.Expressions.ExpressionUtility.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <param name="toReplace"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="T:DapperDal.Expressions.PredicateBuilder">
            <summary>
            谓词表达式构建扩展方法
            </summary>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.True``1">
            <summary>
            Produces a predicate expression always returning true
            </summary>
            <typeparam name="T">The input type for the resulting expression</typeparam>
            <returns>A constant expression returning true</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.False``1">
            <summary>
            Produces a predicate expression always returning false
            </summary>
            <typeparam name="T">The input type for the resulting expression</typeparam>
            <returns>A constant expression returning false</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using a logical "and". Short-circuits if either expression is constant
            </summary>
            <typeparam name="T">The input type for both predicates</typeparam>
            <param name="first">The first predicate</param>
            <param name="second">The second predicate</param>
            <returns>An expression representing a logical "and" between both predicates</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines the first predicate with the second using a logical "or". Short-circuits if either expression is constant
            </summary>
            <typeparam name="T">The input type for both predicates</typeparam>
            <param name="first">The first predicate</param>
            <param name="second">The second predicate</param>
            <returns>An expression representing a logical "or" between both predicates</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Composes a negation with the result of the predicate
            </summary>
            <typeparam name="T">The input type for the predicate</typeparam>
            <param name="expr">The predicate</param>
            <returns>An expression negating the result of the predicate</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.All``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>
            Performs a reduction on the given list of predicates using logical "and". Returns a <see cref="M:DapperDal.Expressions.PredicateBuilder.True``1"/> expression if the list is empty
            </summary>
            <typeparam name="T">The input type for all predicates</typeparam>
            <param name="predicates">The predicates</param>
            <returns>A series of "and" expressions</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Performs a reduction on the given list of predicates using logical "and". Returns a <see cref="M:DapperDal.Expressions.PredicateBuilder.True``1"/> expression if the list is empty
            </summary>
            <typeparam name="T">The input type for all predicates</typeparam>
            <param name="predicates">The predicates</param>
            <returns>A series of "and" expressions</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.Any``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>
            Performs a reduction on the given list of predicates using logical "or". Returns a <see cref="M:DapperDal.Expressions.PredicateBuilder.False``1"/> expression if the list is empty
            </summary>
            <typeparam name="T">The input type for all predicates</typeparam>
            <param name="predicates">The predicates</param>
            <returns>A series of "or" expressions</returns>
        </member>
        <member name="M:DapperDal.Expressions.PredicateBuilder.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Performs a reduction on the given list of predicates using logical "or". Returns a <see cref="M:DapperDal.Expressions.PredicateBuilder.False``1"/> expression if the list is empty
            </summary>
            <typeparam name="T">The input type for all predicates</typeparam>
            <param name="predicates">The predicates</param>
            <returns>A series of "or" expressions</returns>
        </member>
        <member name="T:DapperDal.Expressions.QueryFunctions">
            <summary>
            映射SQL查询支持的函数
            </summary>
        </member>
        <member name="M:DapperDal.Expressions.QueryFunctions.Like(System.String,System.Object)">
            <summary>
            For reflection only.
            </summary>
            <param name="pattern"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:DapperDal.Expressions.SortDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="F:DapperDal.Expressions.SortDirection.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:DapperDal.Expressions.SortDirection.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:DapperDal.Expressions.SortingExtensions">
            <summary>
            排序条件转换扩展
            </summary>
        </member>
        <member name="M:DapperDal.Expressions.SortingExtensions.ToSortable``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[],DapperDal.Expressions.SortDirection)">
            <summary>
            排序条件表达式转换为排序组的扩展方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="sortingExpression">排序条件表达式</param>
            <param name="ascending">排序方向</param>
            <returns>排序组</returns>
        </member>
        <member name="M:DapperDal.Expressions.SortingExtensions.ToSortable(System.Object)">
            <summary>
            匿名排序对象转换为排序组的扩展方法
            </summary>
            <param name="sort">匿名排序对象，如new { CarId = SortDirection.Descending }</param>
            <returns>排序组</returns>
        </member>
        <member name="T:DapperDal.Utils.ExpressionExtensions">
            <summary>
            表达式转换扩展
            </summary>
        </member>
        <member name="M:DapperDal.Utils.ExpressionExtensions.Combine``4(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2,``3}})">
            <summary>
            Combines two expressions (a -> b) and (a -> c) with a combining expression ((b,c) -> d) to form an expression (a -> d)
            </summary>
            <typeparam name="T">The input type of both primary expressions</typeparam>
            <typeparam name="T1">The result type of the first primary expression</typeparam>
            <typeparam name="T2">The result type of the second primary expression</typeparam>
            <typeparam name="TResult">The result type of the combining expression</typeparam>
            <param name="first">The first primary expression</param>
            <param name="second">The second primary expression</param>
            <param name="combineExpr">The combining expression</param>
            <returns>A composite of all three expressions, with the first two substituted in place of the third's parameters</returns>
        </member>
        <member name="M:DapperDal.Utils.ExpressionExtensions.Compose``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Composes two expressions (a -> b) and (b -> c) to form an expression (a -> c)
            </summary>
            <typeparam name="T1">The input to the first expression</typeparam>
            <typeparam name="T2">The output of the first expression and input to the second</typeparam>
            <typeparam name="T3">The output of the second expression</typeparam>
            <param name="first">The first expression</param>
            <param name="second">The second expression</param>
            <returns>A composite of the two expressions, with the first substituted in place of the second's parameter</returns>
        </member>
        <member name="M:DapperDal.Utils.ExpressionExtensions.Coalesce``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},``1)">
            <summary>
            Applies null coalescence to an expression resulting in a nullable type
            </summary>
            <typeparam name="T">The input to the expression</typeparam>
            <typeparam name="TResult">The nullable result</typeparam>
            <param name="expr">The expression</param>
            <param name="defaultValue">The default value with which to replace a null value. Defaults to default(TResult)</param>
            <returns>An expression in which a null result is replaced with the given value</returns>
        </member>
        <member name="T:DapperDal.Utils.ReflectionHelper">
            <summary>
            反射工具方法
            </summary>
        </member>
        <member name="M:DapperDal.Utils.ReflectionHelper.GetProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            从表达式获取成员元数据访问器对象
            </summary>
            <param name="lambda">表达式</param>
            <returns>成员元数据访问器对象</returns>
        </member>
        <member name="M:DapperDal.Utils.ReflectionHelper.GetObjectValues(System.Object)">
            <summary>
            对象生成属性名及属性值的字典返回
            </summary>
            <param name="obj">对象</param>
            <returns>属性名及属性值的字典</returns>
        </member>
        <member name="M:DapperDal.Utils.ReflectionHelper.AppendStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            拼接查询字段名
            </summary>
            <param name="list">查询字段名列表</param>
            <param name="seperator">拼接分割字符</param>
            <returns>拼接后的语句</returns>
        </member>
        <member name="M:DapperDal.Utils.ReflectionHelper.IsSimpleType(System.Type)">
            <summary>
            类型是否是简单类型
            </summary>
            <param name="type">类型</param>
            <returns>是否是简单类型</returns>
        </member>
        <member name="M:DapperDal.Utils.ReflectionHelper.GetParameterName(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Char)">
            <summary>
            生成SQL参数片段
            </summary>
            <param name="parameters">参数列表</param>
            <param name="parameterName">参数名</param>
            <param name="parameterPrefix">参数前缀</param>
            <returns>参数片段</returns>
        </member>
        <member name="M:DapperDal.Utils.ReflectionHelper.SetParameterName(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object,System.Char)">
            <summary>
            生成SQL参数片段
            </summary>
            <param name="parameters">参数列表</param>
            <param name="parameterName">参数名</param>
            <param name="value">参数值</param>
            <param name="parameterPrefix">参数前缀</param>
            <returns>参数片段</returns>
        </member>
        <member name="T:DapperDal.Implementor.IDalImplementor">
            <summary>
            数据访问器实现接口
            </summary>
        </member>
        <member name="P:DapperDal.Implementor.IDalImplementor.SqlGenerator">
            <summary>
            SQL生成器
            </summary>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据实体ID（主键）获取实体
            </summary>
            <param name="connection">数据库连接</param>
            <param name="id">实体ID（主键）</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回实体</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            批量插入指定实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="entities">实体集合</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            插入指定实体
            </summary>
            <param name="connection">数据库连接</param>
            <param name="entity">实体</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回插入实体ID（主键）</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新指定实体
            </summary>
            <param name="connection">数据库连接</param>
            <param name="entity">实体</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回更新是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IList{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新指定实体指定属性
            </summary>
            <param name="connection">数据库连接</param>
            <param name="entity">实体</param>
            <param name="props">要更新的属性名列表</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回更新是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Update``1(System.Data.IDbConnection,``0,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            更新指定实体指定属性
            </summary>
            <param name="connection">数据库连接</param>
            <param name="entity">实体</param>
            <param name="props">要更新的属性名列表，以匿名对象提供</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回更新是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Update``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据指定指定主键ID更新实体指定属性
            </summary>
            <param name="connection">数据库连接</param>
            <param name="keyAndProps">更新实体，包含主键ID、更新属性及值</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回更新是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Update``1(System.Data.IDbConnection,System.Object,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据指定更新条件更新实体指定属性
            </summary>
            <param name="connection">数据库连接</param>
            <param name="props">要更新的属性名及值，以匿名对象提供</param>
            <param name="predicate">更新条件，使用谓词或匿名对象</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回更新是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除指定实体
            </summary>
            <param name="connection">数据库连接</param>
            <param name="entity">实体</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回删除是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据条件删除实体
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">删除条件</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回删除是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetTop``1(System.Data.IDbConnection,System.Int32,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体集合的前N条
            </summary>
            <param name="connection">数据库连接</param>
            <param name="limit">前几条</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体分页集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="page">页索引，从0起始</param>
            <param name="resultsPerPage">每页条数</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体区间集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据条件获取实体条数
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体条数</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetMultiple(System.Data.IDbConnection,DapperDal.Predicate.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据多个条件组获取多个指定实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">查询条件</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <returns>多实体集合读取器</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetIdPredicate(DapperDal.Mapper.IClassMapper,System.Object)">
            <summary>
            根据实体主键ID获取谓词组
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="id">实体主键ID</param>
            <returns>谓词组</returns>
        </member>
        <member name="M:DapperDal.Implementor.IDalImplementor.GetIdPredicate``1(System.Object)">
            <summary>
            获取实体主键ID条件谓词
            </summary>
            <param name="id">实体主键ID</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>谓词</returns>
        </member>
        <member name="T:DapperDal.Implementor.DalImplementor">
            <summary>
            数据访问器默认实现类
            </summary>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.#ctor(DapperDal.Sql.ISqlGenerator)">
            <summary>
            初始化数据访问器
            </summary>
            <param name="sqlGenerator">SQL生成器</param>
        </member>
        <member name="P:DapperDal.Implementor.DalImplementor.SqlGenerator">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IList{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Update``1(System.Data.IDbConnection,``0,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Update``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Update``1(System.Data.IDbConnection,System.Object,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetTop``1(System.Data.IDbConnection,System.Int32,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetMultiple(System.Data.IDbConnection,DapperDal.Predicate.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetList``1(System.Data.IDbConnection,DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetList``1(System.Data.IDbConnection,DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="limit">前几条</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetPage``1(System.Data.IDbConnection,DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体分页集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="page">页索引，从0起始</param>
            <param name="resultsPerPage">每页条数</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetSet``1(System.Data.IDbConnection,DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            根据查询条件和排序条件获取实体区间集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <param name="buffered">实体集合返回前是否要缓冲（ToList）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.Delete``1(System.Data.IDbConnection,DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据条件删除实体
            </summary>
            <param name="connection">数据库连接</param>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">删除条件</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>返回删除是否成功的结果</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetPredicate(DapperDal.Mapper.IClassMapper,System.Object)">
            <summary>
            根据实体对象获取谓词组
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">谓词表达式组，或实体对象</param>
            <returns>谓词组</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetIdPredicate(DapperDal.Mapper.IClassMapper,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetIdPredicate``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetKeyPredicate``1(DapperDal.Mapper.IClassMapper,``0)">
            <summary>
            根据实体获取谓词组
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="entity">实体</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>谓词组</returns>
            <exception cref="T:System.ArgumentException">实体无主键</exception>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetKeyPredicate``1(DapperDal.Mapper.IClassMapper,System.Object)">
            <summary>
            根据实体获取谓词组
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="entity">实体</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>谓词组</returns>
            <exception cref="T:System.ArgumentException">实体无主键</exception>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetEntityPredicate(DapperDal.Mapper.IClassMapper,System.Object)">
            <summary>
            根据实体获取谓词组
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="entity">实体</param>
            <returns>谓词组</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetMultipleByBatch(System.Data.IDbConnection,DapperDal.Predicate.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据多个条件组批量获取多个指定实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">多条件谓词组</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <returns>多实体集合读取器</returns>
        </member>
        <member name="M:DapperDal.Implementor.DalImplementor.GetMultipleBySequence(System.Data.IDbConnection,DapperDal.Predicate.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            根据多个条件组顺次获取多个指定实体集合
            </summary>
            <param name="connection">数据库连接</param>
            <param name="predicate">多条件谓词组</param>
            <param name="transaction">数据库事务</param>
            <param name="commandTimeout">数据库命令超时时间（单位秒）</param>
            <returns>多实体集合读取器</returns>
        </member>
        <member name="T:DapperDal.Mapper.AutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys.
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.AutoClassMapper`1.#ctor">
            <summary>
            初始化自动类型绑定器
            </summary>
        </member>
        <member name="T:DapperDal.Mapper.AutoEntityMapper`1">
            <summary>
            实体自动映射器类
            </summary>
            <typeparam name="T">实体类</typeparam>
        </member>
        <member name="M:DapperDal.Mapper.AutoEntityMapper`1.#ctor">
            <summary>
            初始化自动映射实体
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.AutoEntityMapper`1.RemovePostFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            </summary>
            <param name="str">The string.</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="T:DapperDal.Mapper.IClassMapper">
            <summary>
            实体类型映射器接口
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IClassMapper.SchemaName">
            <summary>
            数据库架构名
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IClassMapper.TableName">
            <summary>
            数据库表名
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IClassMapper.Properties">
            <summary>
            实体属性信息列表
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IClassMapper.EntityType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="T:DapperDal.Mapper.IClassMapper`1">
            <summary>
            泛型实体映射器接口
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="T:DapperDal.Mapper.ClassMapper`1">
            <summary>
            默认泛型实体映射器类
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.ClassMapper`1.SchemaName">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.ClassMapper`1.TableName">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.ClassMapper`1.Properties">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.ClassMapper`1.EntityType">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.#ctor">
            <summary>
            初始化默认泛型实体映射器
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.ClassMapper`1.PropertyTypeKeyTypeMapping">
            <summary>
            属性类型与键类型的对应关系字典
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.Schema(System.String)">
            <summary>
            设置数据库架构名
            </summary>
            <param name="schemaName">数据库架构名</param>
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.Table(System.String)">
            <summary>
            设置数据库表名
            </summary>
            <param name="tableName">设置数据库表名</param>
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.AutoMap">
            <summary>
            执行自动映射
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.AutoMap(System.Func{System.Type,System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            执行自动映射
            </summary>
            <param name="canMap">指示实体属性是否要映射的方法提供</param>
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            设置实体属性映射，支持链式调用
            </summary>
            <param name="expression">实体属性映射表达式</param>
            <returns>实体属性映射器</returns>
        </member>
        <member name="M:DapperDal.Mapper.ClassMapper`1.Map(System.Reflection.PropertyInfo)">
            <summary>
            设置实体属性映射，支持链式调用
            </summary>
            <param name="propertyInfo">实体属性元数据访问器</param>
            <returns>实体属性映射器</returns>
        </member>
        <member name="T:DapperDal.Mapper.PluralizedAutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys. 
            Identical to AutoClassMapper, but attempts to pluralize table names automatically.
            Example: Person entity maps to People table
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.PluralizedAutoClassMapper`1.Table(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Mapper.PluralizedAutoClassMapper`1.Formatting">
            <summary>
            Adapted from: http://mattgrande.wordpress.com/2009/10/28/pluralization-helper-for-c/
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.PluralizedAutoClassMapper`1.Formatting.Pluralize(System.String)">
            <summary>
            复形化
            </summary>
            <param name="singular">单词</param>
            <returns>复数</returns>
        </member>
        <member name="T:DapperDal.Mapper.IPropertyMap">
            <summary>
            实体属性映射器接口
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IPropertyMap.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IPropertyMap.ColumnName">
            <summary>
            属性对应表字段名
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IPropertyMap.Ignored">
            <summary>
            属性是否忽略
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IPropertyMap.IsReadOnly">
            <summary>
            属性是否只读
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IPropertyMap.KeyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:DapperDal.Mapper.IPropertyMap.PropertyInfo">
            <summary>
            属性元数据访问器
            </summary>
        </member>
        <member name="T:DapperDal.Mapper.PropertyMap">
            <summary>
            实体属性映射器类
            </summary>
        </member>
        <member name="M:DapperDal.Mapper.PropertyMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            初始化实体属性映射器
            </summary>
            <param name="propertyInfo">属性元数据访问器</param>
        </member>
        <member name="P:DapperDal.Mapper.PropertyMap.Name">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.PropertyMap.ColumnName">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.PropertyMap.KeyType">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.PropertyMap.Ignored">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.PropertyMap.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Mapper.PropertyMap.PropertyInfo">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Mapper.PropertyMap.Column(System.String)">
            <summary>
            设置实体属性和表字段的映射，支持链式调用
            </summary>
            <param name="columnName">表字段名</param>
            <returns>实体属性映射器</returns>
        </member>
        <member name="M:DapperDal.Mapper.PropertyMap.Key(DapperDal.Mapper.KeyType)">
            <summary>
            设置实体属性类型，支持链式调用
            </summary>
            <param name="keyType">属性类型</param>
            <returns>实体属性映射器</returns>
        </member>
        <member name="M:DapperDal.Mapper.PropertyMap.Ignore">
            <summary>
            设置实体属性忽略，支持链式调用
            </summary>
            <returns>实体属性映射器</returns>
        </member>
        <member name="M:DapperDal.Mapper.PropertyMap.ReadOnly">
            <summary>
            设置实体属性只读，支持链式调用
            </summary>
            <returns>实体属性映射器</returns>
        </member>
        <member name="T:DapperDal.Mapper.KeyType">
            <summary>
            属性类型枚举
            </summary>
        </member>
        <member name="F:DapperDal.Mapper.KeyType.NotAKey">
            <summary>
            属性不是键，且不自增的
            The property is not a key and is not automatically managed.
            </summary>
        </member>
        <member name="F:DapperDal.Mapper.KeyType.Identity">
            <summary>
            属性是自增主键
            The property is an integery-based identity generated from the database.
            </summary>
        </member>
        <member name="F:DapperDal.Mapper.KeyType.TriggerIdentity">
            <summary>
            属性是触发主键
            The property is an identity generated by the database trigger.
            </summary>
        </member>
        <member name="F:DapperDal.Mapper.KeyType.Guid">
            <summary>
            属性是GUID
            The property is a Guid identity which is automatically managed.
            </summary>
        </member>
        <member name="F:DapperDal.Mapper.KeyType.Assigned">
            <summary>
            属性是不自增的键
            The property is a key that is not automatically managed.
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.GetMultiplePredicate">
            <summary>
            表示多结果集的谓词组
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.GetMultiplePredicate.#ctor">
            <summary>
            初始化多结果集的谓词组
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.GetMultiplePredicate.Items">
            <summary>
            谓词组集合
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.GetMultiplePredicate.Add``1(DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort})">
            <summary>
            添加一条结果集谓词组
            </summary>
            <param name="predicate">谓词</param>
            <param name="sort">排序条件</param>
            <typeparam name="T">结果集实体类型</typeparam>
        </member>
        <member name="M:DapperDal.Predicate.GetMultiplePredicate.Add``1(System.Object)">
            <summary>
            添加一条结果集谓词组
            </summary>
            <param name="id">谓词</param>
            <typeparam name="T">结果集实体类型</typeparam>
        </member>
        <member name="T:DapperDal.Predicate.GetMultiplePredicate.GetMultiplePredicateItem">
            <summary>
            表示多结果集的谓词组的项目
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.GetMultiplePredicate.GetMultiplePredicateItem.Value">
            <summary>
            谓词组值对象
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.GetMultiplePredicate.GetMultiplePredicateItem.Type">
            <summary>
            结果集实体类型
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.GetMultiplePredicate.GetMultiplePredicateItem.Sort">
            <summary>
            排序条件列表
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.IMultipleResultReader">
            <summary>
            多结果集读取器接口
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.IMultipleResultReader.Read``1">
            <summary>
            获取结果集
            </summary>
            <typeparam name="T">结果集实体类型</typeparam>
            <returns>实体集合</returns>
        </member>
        <member name="T:DapperDal.Predicate.GridReaderResultReader">
            <summary>
            多结果集批量读取类
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.GridReaderResultReader.#ctor(Dapper.SqlMapper.GridReader)">
            <summary>
            初始化多结果集批量读取类
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:DapperDal.Predicate.GridReaderResultReader.Read``1">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.SequenceReaderResultReader">
            <summary>
            多结果集顺次读取类
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.SequenceReaderResultReader.#ctor(System.Collections.Generic.IEnumerable{Dapper.SqlMapper.GridReader})">
            <summary>
            初始化多结果集顺次读取类
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:DapperDal.Predicate.SequenceReaderResultReader.Read``1">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.Predicates">
            <summary>
            谓词组工具方法
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.Predicates.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DapperDal.Predicate.Operator,System.Object,System.Boolean)">
            <summary>
            Factory method that creates a new IFieldPredicate predicate: [FieldName] [Operator] [Value]. 
            Example: WHERE FirstName = 'Foo'
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName].</param>
            <param name="op">The comparison operator.</param>
            <param name="value">The value for the predicate.</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; 'Foo'.</param>
            <returns>An instance of IFieldPredicate.</returns>
        </member>
        <member name="M:DapperDal.Predicate.Predicates.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DapperDal.Predicate.Operator,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new IPropertyPredicate predicate: [FieldName1] [Operator] [FieldName2]
            Example: WHERE FirstName = LastName
            </summary>
            <typeparam name="T">The type of the entity for the left operand.</typeparam>
            <typeparam name="T2">The type of the entity for the right operand.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName1].</param>
            <param name="op">The comparison operator.</param>
            <param name="expression2">An expression that returns the right operand [FieldName2].</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; LastName </param>
            <returns>An instance of IPropertyPredicate.</returns>
        </member>
        <member name="M:DapperDal.Predicate.Predicates.Group(DapperDal.Predicate.GroupOperator,DapperDal.Predicate.IPredicate[])">
            <summary>
            Factory method that creates a new IPredicateGroup predicate.
            Predicate groups can be joined together with other predicate groups.
            </summary>
            <param name="op">The grouping operator to use when joining the predicates (AND / OR).</param>
            <param name="predicate">A list of predicates to group.</param>
            <returns>An instance of IPredicateGroup.</returns>
        </member>
        <member name="M:DapperDal.Predicate.Predicates.Exists``1(DapperDal.Predicate.IPredicate,System.Boolean)">
            <summary>
            Factory method that creates a new IExistsPredicate predicate.
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.Predicates.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DapperDal.Predicate.BetweenValues,System.Boolean)">
            <summary>
            Factory method that creates a new IBetweenPredicate predicate. 
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.Predicates.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new Sort which controls how the results will be sorted.
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.IPredicate">
            <summary>
            表示谓词的接口
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.IPredicate.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            返回根据参数使用SQL生成器生成的SQL语句
            </summary>
            <param name="sqlGenerator">SQL生成器</param>
            <param name="parameters">参数</param>
            <returns>SQL语句</returns>
        </member>
        <member name="T:DapperDal.Predicate.IBasePredicate">
            <summary>
            表示谓词的基接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IBasePredicate.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.BasePredicate">
            <summary>
            谓词基类
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.BasePredicate.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Predicate.BasePredicate.PropertyName">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Predicate.BasePredicate.GetColumnName(System.Type,DapperDal.Sql.ISqlGenerator,System.String)">
            <summary>
            获取字段名
            </summary>
            <param name="entityType">实体类型</param>
            <param name="sqlGenerator">SQL生成器</param>
            <param name="propertyName">属性名</param>
            <returns>字段名</returns>
            <exception cref="T:System.NullReferenceException">实体类型或属性映射未找到</exception>
        </member>
        <member name="T:DapperDal.Predicate.IComparePredicate">
            <summary>
            表示比较的谓词接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IComparePredicate.Operator">
            <summary>
            比较操作类型
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IComparePredicate.Not">
            <summary>
            比较类型是否逻辑非
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.ComparePredicate">
            <summary>
            比较谓词基类
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.ComparePredicate.Operator">
            <summary>
            比较操作类型
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.ComparePredicate.Not">
            <summary>
            比较类型是否逻辑非
            </summary>
        </member>
        <member name="M:DapperDal.Predicate.ComparePredicate.GetOperatorString">
            <summary>
            获取比较操作类型的SQL片段
            </summary>
            <returns>SQL片段</returns>
        </member>
        <member name="T:DapperDal.Predicate.IFieldPredicate">
            <summary>
            表示字段值比较谓的词组接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IFieldPredicate.Value">
            <summary>
            字段值
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.FieldPredicate`1">
            <summary>
            字段值比较谓词类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:DapperDal.Predicate.FieldPredicate`1.Value">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Predicate.FieldPredicate`1.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.IPropertyPredicate">
            <summary>
            表示两个属性比较的谓词接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IPropertyPredicate.PropertyName2">
            <summary>
            第二个属性名
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.PropertyPredicate`2">
            <summary>
            两个属性比较的谓词类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:DapperDal.Predicate.PropertyPredicate`2.PropertyName2">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Predicate.PropertyPredicate`2.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.BetweenValues">
            <summary>
            表示在两者之间的起始值、结束值的结构
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.BetweenValues.Value1">
            <summary>
            起始值
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.BetweenValues.Value2">
            <summary>
            结束值
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.IBetweenPredicate">
            <summary>
            表示属性在两者之间的谓词接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IBetweenPredicate.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IBetweenPredicate.Value">
            <summary>
            起始值、结束值
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IBetweenPredicate.Not">
            <summary>
            比较类型是否逻辑非
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.BetweenPredicate`1">
            <summary>
            表示属性在两者之间的谓词类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DapperDal.Predicate.BetweenPredicate`1.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Predicate.BetweenPredicate`1.Value">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Predicate.BetweenPredicate`1.Not">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.Operator">
            <summary>
            谓词比较操作类型
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.Operator.Eq">
            <summary>
            等于
            Equal to
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.Operator.Gt">
            <summary>
            大于
            Greater than
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.Operator.Ge">
            <summary>
            大于等于
            Greater than or equal to
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.Operator.Lt">
            <summary>
            小于
            Less than
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.Operator.Le">
            <summary>
            小于等于
            Less than or equal to
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.Operator.Like">
            <summary>
            类似于
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.IPredicateGroup">
            <summary>
            表示谓词组的接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IPredicateGroup.Operator">
            <summary>
            谓词之间组合的操作类型
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IPredicateGroup.Predicates">
            <summary>
            谓词组
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.PredicateGroup">
            <summary>
            谓词组类
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.PredicateGroup.Operator">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Predicate.PredicateGroup.Predicates">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Predicate.PredicateGroup.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.IExistsPredicate">
            <summary>
            表示是否存在的谓词接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IExistsPredicate.Predicate">
            <summary>
            子谓词
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.IExistsPredicate.Not">
            <summary>
            比较类型是否逻辑非
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.ExistsPredicate`1">
            <summary>
            是否存在的谓词类
            </summary>
            <typeparam name="TSub"></typeparam>
        </member>
        <member name="P:DapperDal.Predicate.ExistsPredicate`1.Predicate">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Predicate.ExistsPredicate`1.Not">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Predicate.ExistsPredicate`1.GetSql(DapperDal.Sql.ISqlGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Predicate.ExistsPredicate`1.GetClassMapper(System.Type,DapperDal.IDalConfiguration)">
            <summary>
            获取实体类型的映射器
            </summary>
            <param name="type">实体类型</param>
            <param name="configuration">数据访问配置</param>
            <returns>实体类型的映射器</returns>
            <exception cref="T:System.NullReferenceException">实体类型的映射器未找到</exception>
        </member>
        <member name="T:DapperDal.Predicate.ISort">
            <summary>
            表示排序条件的接口
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.ISort.PropertyName">
            <summary>
            排序属性名
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.ISort.Ascending">
            <summary>
            是否升序
            </summary>
        </member>
        <member name="T:DapperDal.Predicate.Sort">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:DapperDal.Predicate.Sort.PropertyName">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Predicate.Sort.Ascending">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Predicate.GroupOperator">
            <summary>
            谓词间组合操作类型
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.GroupOperator.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:DapperDal.Predicate.GroupOperator.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:DapperDal.Sql.ISqlDialect">
            <summary>
            SQL方言接口
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlDialect.OpenQuote">
            <summary>
            表示左引号的字符
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlDialect.CloseQuote">
            <summary>
            表示右引号的字符
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlDialect.BatchSeperator">
            <summary>
            表示批次分割的字符串
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlDialect.SupportsMultipleStatements">
            <summary>
            是否支持多语句执行
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlDialect.ParameterPrefix">
            <summary>
            表示参数前缀的字符
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlDialect.EmptyExpression">
            <summary>
            表示空表达式的字符串
            </summary>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.GetTableName(System.String,System.String,System.String)">
            <summary>
            生成表名
            </summary>
            <param name="schemaName">数据库架构</param>
            <param name="tableName">数据库表名</param>
            <param name="alias">数据库表别名</param>
            <returns>表名</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.GetColumnName(System.String,System.String,System.String)">
            <summary>
            生成字段名
            </summary>
            <param name="prefix">前缀</param>
            <param name="columnName">字段名</param>
            <param name="alias">字段别名</param>
            <returns>字段名</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.GetIdentitySql(System.String)">
            <summary>
            生成包含主键条件的获取语句
            </summary>
            <param name="tableName">数据库表名</param>
            <returns>SQL</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成分页SQL
            </summary>
            <param name="sql">原SQL</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">每页条数</param>
            <param name="parameters">参数</param>
            <returns>新SQL</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成区间SQL
            </summary>
            <param name="sql">原SQL</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <param name="parameters">参数</param>
            <returns>新SQL</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.IsQuoted(System.String)">
            <summary>
            判断语句是否包含引号
            </summary>
            <param name="value">语句</param>
            <returns>是否包含引号</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.QuoteString(System.String)">
            <summary>
            语句添加引号
            </summary>
            <param name="value">原语句</param>
            <returns>新语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.SelectLimit(System.String,System.Int32)">
            <summary>
            获取前N条的SQL
            </summary>
            <param name="sql">原SQL</param>
            <param name="limit">指定前几条</param>
            <returns>新SQL</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlDialect.SetNolock(System.String)">
            <summary>
            SQL语句添加 WITH (NOLOCK)
            </summary>
            <param name="sql">SQL语句</param>
            <returns>添加后SQL语句</returns>
        </member>
        <member name="T:DapperDal.Sql.SqlDialectBase">
            <summary>
            SQL方言基类
            </summary>
        </member>
        <member name="P:DapperDal.Sql.SqlDialectBase.OpenQuote">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Sql.SqlDialectBase.CloseQuote">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Sql.SqlDialectBase.BatchSeperator">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Sql.SqlDialectBase.SupportsMultipleStatements">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Sql.SqlDialectBase.ParameterPrefix">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Sql.SqlDialectBase.EmptyExpression">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.GetTableName(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.GetColumnName(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.GetIdentitySql(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.IsQuoted(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.QuoteString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.UnQuoteString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.SelectLimit(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlDialectBase.SetNolock(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DapperDal.Sql.ISqlGenerator">
            <summary>
            SQL生成器接口
            </summary>
        </member>
        <member name="P:DapperDal.Sql.ISqlGenerator.Configuration">
            <summary>
            数据访问配置类实例
            </summary>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.Select(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <summary>
            生成获取语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件谓词</param>
            <param name="sort">排序条件</param>
            <param name="parameters">查询参数</param>
            <param name="limit">前几条</param>
            <returns>生成获取语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.SelectPaged(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成分页获取语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件谓词</param>
            <param name="sort">排序条件</param>
            <param name="page">页索引</param>
            <param name="resultsPerPage">每页条数</param>
            <param name="parameters">查询参数</param>
            <returns>分页获取语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.SelectSet(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成区间获取语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件谓词</param>
            <param name="sort">排序条件</param>
            <param name="firstResult">起始行数</param>
            <param name="maxResults">最大条数</param>
            <param name="parameters">查询参数</param>
            <returns>区间获取语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.Count(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成条数获取语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">查询条件谓词</param>
            <param name="parameters">查询参数</param>
            <returns>条数获取语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.Insert(DapperDal.Mapper.IClassMapper)">
            <summary>
            生成插入语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <returns>条数获取语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.Update(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.String})">
            <summary>
            生成更新语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">更新条件谓词</param>
            <param name="parameters">更新参数</param>
            <param name="props">更新属性列表</param>
            <returns>更新语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.Delete(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            生成删除语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <param name="predicate">删除条件谓词</param>
            <param name="parameters">删除参数</param>
            <returns>删除语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.IdentitySql(DapperDal.Mapper.IClassMapper)">
            <summary>
            生成包含主键条件的获取语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <returns>包含主键条件的获取语句</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.GetTableName(DapperDal.Mapper.IClassMapper)">
            <summary>
            生成表名
            </summary>
            <param name="map">实体类型映射</param>
            <returns></returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.GetColumnName(DapperDal.Mapper.IClassMapper,DapperDal.Mapper.IPropertyMap,System.Boolean)">
            <summary>
            生成字段名
            </summary>
            <param name="map">实体类型映射</param>
            <param name="property">属性映射</param>
            <param name="includeAlias">是否包含别名</param>
            <returns>字段名</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.GetColumnName(DapperDal.Mapper.IClassMapper,System.String,System.Boolean)">
            <summary>
            生成字段名
            </summary>
            <param name="map">实体类型映射</param>
            <param name="propertyName">属性名</param>
            <param name="includeAlias">是否包含别名</param>
            <returns>字段名</returns>
        </member>
        <member name="M:DapperDal.Sql.ISqlGenerator.SupportsMultipleStatements">
            <summary>
            是否支持多语句执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:DapperDal.Sql.SqlGeneratorImpl">
            <summary>
            SQL生成器类
            </summary>
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.#ctor(DapperDal.IDalConfiguration)">
            <summary>
            初始化SQL生成器类
            </summary>
            <param name="configuration">数据访问配置类实例</param>
        </member>
        <member name="P:DapperDal.Sql.SqlGeneratorImpl.Configuration">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.Select(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Collections.Generic.IDictionary{System.String,System.Object},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.SelectPaged(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.SelectSet(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IList{DapperDal.Predicate.ISort},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.Count(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.Insert(DapperDal.Mapper.IClassMapper)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.Update(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{System.String})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.Delete(DapperDal.Mapper.IClassMapper,DapperDal.Predicate.IPredicate,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.IdentitySql(DapperDal.Mapper.IClassMapper)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.GetTableName(DapperDal.Mapper.IClassMapper)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.GetColumnName(DapperDal.Mapper.IClassMapper,DapperDal.Mapper.IPropertyMap,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.GetColumnName(DapperDal.Mapper.IClassMapper,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.SupportsMultipleStatements">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlGeneratorImpl.BuildSelectColumns(DapperDal.Mapper.IClassMapper)">
            <summary>
            生成所有字段组合语句
            </summary>
            <param name="classMap">实体类型映射</param>
            <returns>字段组合语句</returns>
        </member>
        <member name="T:DapperDal.Sql.SqlServerDialect">
            <summary>
            SQL Server方言类
            </summary>
        </member>
        <member name="P:DapperDal.Sql.SqlServerDialect.OpenQuote">
            <inheritdoc />
        </member>
        <member name="P:DapperDal.Sql.SqlServerDialect.CloseQuote">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetIdentitySql(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetPagingSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetSetSql(System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetOrderByClause(System.String)">
            <summary>
            获取SQL语句的排序部分语句
            </summary>
            <param name="sql">SQL语句</param>
            <returns>排序部分语句</returns>
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetFromStart(System.String)">
            <summary>
            获取SQL语句的FROM索引
            </summary>
            <param name="sql">SQL语句</param>
            <returns>FROM索引</returns>
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetSelectEnd(System.String)">
            <summary>
            获取SQL语句的SELECT索引
            </summary>
            <param name="sql">SQL语句</param>
            <returns>SELECT索引</returns>
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.GetColumnNames(System.String)">
            <summary>
            获取SQL语句里的所有字段名
            </summary>
            <param name="sql">SQL语句</param>
            <returns>字段名列表</returns>
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.SelectLimit(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DapperDal.Sql.SqlServerDialect.SetNolock(System.String)">
            <inheritdoc />
        </member>
    </members>
</doc>
